{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"DDB Sonarqube \u00b6 This project is a ready to use Sonarqube instance for docker-devbox-ddb environments. Requirement \u00b6 First and foremost, you need to have an environment where docker-devbox-ddb is installed. Configuration for Linux based environment \u00b6 You will need to update some system variables, as follows: sudo sed -i -e '/^\\(vm.max_map_count=\\).*/{s//\\1262144/;:a;n;ba;q}' -e '$avm.max_map_count=262144' /etc/sysctl.conf As it is taken into account after a reboot, you can execute the following before rebooting: sudo sysctl -w vm.max_map_count = 262144 It will update the same configuration but local to your session. Installation \u00b6 First, you need to clone the repository of the project Then, you need to configure the project with ddb configuration. For more detail, please refer to docker-devbox-ddb official documentation. To do so, you need to run the following command : ddb configure Now you can run the project: docker-compose up -d That's it! Sonarqube is now running in your environement with ddb! If you want to check the URL to access it, simply run ddb info . Default plugins \u00b6 By default, the project contains the following plugins: 1. dependency-check/dependency-check-sonar-plugin 2. mc1arke/sonarqube-community-branch-plugin 3. vaulttec/sonar-auth-oidc Configuration \u00b6 Out of the box, Sonarqube will be accessible and work as expected with default installation. For some part of the application or for some plugins, you may want to update Sonarqube configuration. To do so, you just need to create a ddb.local.yaml in the project. In this file, you will need to add configuration as follows: sonarqube: config: \"<config-key>\" : \"<config-value>\" For each config key, you will need to add a line in the file. For instance, if you want to enable the OIDC plugin : sonarqube : config : \"sonar.auth.oidc.enabled\" : true Once everything is configure as wanted, just run ddb configure and restart your containers using docker-compose down and docker-compose up -d","title":"Home"},{"location":"#ddb-sonarqube","text":"This project is a ready to use Sonarqube instance for docker-devbox-ddb environments.","title":"DDB Sonarqube"},{"location":"#requirement","text":"First and foremost, you need to have an environment where docker-devbox-ddb is installed.","title":"Requirement"},{"location":"#configuration-for-linux-based-environment","text":"You will need to update some system variables, as follows: sudo sed -i -e '/^\\(vm.max_map_count=\\).*/{s//\\1262144/;:a;n;ba;q}' -e '$avm.max_map_count=262144' /etc/sysctl.conf As it is taken into account after a reboot, you can execute the following before rebooting: sudo sysctl -w vm.max_map_count = 262144 It will update the same configuration but local to your session.","title":"Configuration for Linux based environment"},{"location":"#installation","text":"First, you need to clone the repository of the project Then, you need to configure the project with ddb configuration. For more detail, please refer to docker-devbox-ddb official documentation. To do so, you need to run the following command : ddb configure Now you can run the project: docker-compose up -d That's it! Sonarqube is now running in your environement with ddb! If you want to check the URL to access it, simply run ddb info .","title":"Installation"},{"location":"#default-plugins","text":"By default, the project contains the following plugins: 1. dependency-check/dependency-check-sonar-plugin 2. mc1arke/sonarqube-community-branch-plugin 3. vaulttec/sonar-auth-oidc","title":"Default plugins"},{"location":"#configuration","text":"Out of the box, Sonarqube will be accessible and work as expected with default installation. For some part of the application or for some plugins, you may want to update Sonarqube configuration. To do so, you just need to create a ddb.local.yaml in the project. In this file, you will need to add configuration as follows: sonarqube: config: \"<config-key>\" : \"<config-value>\" For each config key, you will need to add a line in the file. For instance, if you want to enable the OIDC plugin : sonarqube : config : \"sonar.auth.oidc.enabled\" : true Once everything is configure as wanted, just run ddb configure and restart your containers using docker-compose down and docker-compose up -d","title":"Configuration"}]}